<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>krgr&#39;s programming memo</title>
    <link>https://krgrwm.github.io/</link>
    <description>Recent content on krgr&#39;s programming memo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 09 Dec 2018 20:42:41 +0900</lastBuildDate>
    
	<atom:link href="https://krgrwm.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Water Simulation</title>
      <link>https://krgrwm.github.io/posts/water-simulation/</link>
      <pubDate>Sun, 09 Dec 2018 20:42:41 +0900</pubDate>
      
      <guid>https://krgrwm.github.io/posts/water-simulation/</guid>
      <description>書きかけ
概要 セルオートマトンを用いて2次元の水のシミュレーションをした．
[シミュレーション]()
このシミュレーションのアルゴリズムは次のサイトによるものである．
参考サイト: https://w-shadow.com/blog/2009/09/01/simple-fluid-simulation/
アルゴリズム 系は格子状に並んだセルで構成される．
1つ1つのセルは水を含むことができる． 水の量は連続値を取り，$0 \leq M \leq M_{max}$ とする．
最初に単純なアルゴリズムを説明し， 次にそれを改良したものを説明する．
単純なアルゴリズム セルの近傍はノイマン近傍とする．
時間ステップ$n$でのセルの持つ水の量を$M^{(n)}$と表記する． 近傍(上下左右)のセルの持つ水の量を $M^{(n)}{\uparrow}$ $M^{(n)}{\downarrow}$ $M^{(n)}{\gets}$ $M^{(n)}{\to}$ と表記する．
次のルールを1つのセルに順番に適用し，すべてのセルを更新する． ルールを適用するセルを中心のセルと呼ぶ． 1. 水の落下
次の時間ステップで中心と下のセルが平衡状態に達するように水の流出量を計算する．
つまり，次の時間ステップで下のセルの水量が最大値になるようにする． TODO: 図を乗せる
 $M^{(n)}{\downarrow} \ge M{max}$の場合
下のセルはこれ以上水を含めないので，水は落下できない
$M^{(n+1&amp;frasl;2)} = M^{(n)}$
$M^{(n+1&amp;frasl;2)}{\uparrow} = M^{(n)}{\uparrow}$
$M^{(n+1&amp;frasl;2)}{\downarrow} = M^{(n)}{\downarrow}$
$M^{(n+1&amp;frasl;2)}{\gets} = M^{(n)}{\gets}$
$M^{(n+1&amp;frasl;2)}{\to} = M^{(n)}{\to}$
 $M^{(n)}{\downarrow} &amp;lt; M{max}$の場合
水を下のセルに落下させる
$M^{(n+1&amp;frasl;2)} = M^{(n)} - (M{max}-M{\downarrow}^{(n)})$
$M^{(n+1&amp;frasl;2)}{\downarrow} = M{max}$
$M^{(n+1&amp;frasl;2)}{\uparrow} = M^{(n)}{\uparrow}$</description>
    </item>
    
    <item>
      <title>1次元拡散方程式のシミュレーション</title>
      <link>https://krgrwm.github.io/prog/diffusion/</link>
      <pubDate>Sun, 02 Dec 2018 19:58:53 +0900</pubDate>
      
      <guid>https://krgrwm.github.io/prog/diffusion/</guid>
      <description> TODO: マウスドラッグ中に画面外に出たときの処理を追加する
概要 拡散方程式のシミュレーションを行う． マウスで描いた曲線を初期状態とする．
水色の曲線: 差分法による数値解
赤色の曲線: フーリエ級数展開による近似解
操作  初期状態の曲線を描く
左クリック+ドラッグ
 シミュレーション開始
ページ右上のrun
 初期状態を有限項のフーリエ級数展開したときの項数
ページ右上のfourierDegree
 差分法の時間ステップdt
ページ右上のdt
  </description>
    </item>
    
    <item>
      <title>[解説]1次元拡散方程式のシミュレーション</title>
      <link>https://krgrwm.github.io/posts/diffusion/</link>
      <pubDate>Sun, 02 Dec 2018 14:40:08 +0900</pubDate>
      
      <guid>https://krgrwm.github.io/posts/diffusion/</guid>
      <description>概要 typescriptによるシミュレーション
typescriptの勉強も兼ねて一次元拡散方程式のシミュレーションプログラムを作成した． 次の式を数値的に解いた．
\begin{align} &amp;amp;\frac{\partial u}{\partial t} = \frac{\partial^2 u}{\partial x^2} ~~~~~~~~0 &amp;lt; x &amp;lt; 1 ~~~~~ 0 &amp;lt; t &amp;lt; \infty \label{eq:deq} \\
&amp;amp;u(0, t) = 0 \label{eq:bcond} \\
&amp;amp;u(1, t) = 0 \\
&amp;amp;u(x, 0) = f(x) ~~~(マウスで描いた曲線を与える) \end{align}
計算方法は次の2つの方法を用いた．
 差分法 初期状態$u(x,0)$を有限項のフーリエ級数で近似  差分法 式\eqref{eq:deq}の左辺を差分化する． \begin{equation} \Par{u}{t} \to \frac{u(x, t+dt) - u(x, t)}{dt} \nonumber \end{equation}
式\eqref{eq:deq}の右辺は前進差分，後退差分を用いて \begin{align} \Parn{u}{x}{2} &amp;amp;\to \Par{}{x} \frac{u(x+dx, t) - u(x, t)}{dx} \nonumber \\</description>
    </item>
    
  </channel>
</rss>
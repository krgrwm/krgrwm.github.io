!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},s.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=1)}([function(t,e){t.exports=PIXI},function(t,e,s){"use strict";s.r(e);var i=s(0);let n=innerWidth/5,o=[50,80],l=(innerWidth-n)/o[1],a=innerHeight/o[0],r=Math.min(l,a),h=4*r,c=new i.Application({width:(o[1]-1)*r+n,height:(o[0]-1)*r});const u=.005,m=.005,d=2,f=1;class w{constructor(t,e,s,i){this.mass=t,this.max_mass=e,this.max_comp=s,this.flowable=i}}class p{constructor(t,e,s){this.up=t[e-1][s],this.down=t[e+1][s],this.right=t[e][s+1],this.left=t[e][s-1],this.center=t[e][s]}}function x(t,e,s){return t<=e?e:t<2*e+s?(e*e+t*s)/(e+s):.5*(t+s)}class g extends w{constructor(t=0,e=1,s=.1){super(t,e,s,!0)}color(){console.assert(this.mass>=0,"negative mass");let t=170*this.mass;return 0|(t=Math.min(t,255))}addmass(t){this.mass+=t}emptyCell(){return new g}copy(){let t=new g;return t.mass=this.mass,t.max_mass=this.max_mass,t.max_comp=this.max_comp,t.flowable=this.flowable,t}move(t,e,s){let i=this.mass;if(i<=u)return void(this.mass=0);let n=f*s,o=0;if(t.down.flowable&&((o=x(i+t.down.mass,this.max_mass,this.max_comp)-t.down.mass)>m&&(o*=n),o=Math.min(Math.max(o,0),Math.min(d,i)),e.center.mass-=o,e.down.mass+=o,i-=o),t.left.flowable){if(i<=0)return;(o=.25*(i-t.left.mass))>m&&(o*=n),o=Math.min(Math.max(o,0),i),e.center.mass-=o,e.left.mass+=o,i-=o}if(t.right.flowable){if(i<=0)return;(o=1/3*(i-t.right.mass))>m&&(o*=n),o=Math.min(Math.max(o,0),i),e.center.mass-=o,e.right.mass+=o,i-=o}if(t.up.flowable){if(i<=0)return;(o=i-x(i+t.up.mass,this.max_mass,this.max_comp))>m&&(o*=n),o=Math.min(Math.max(o,0),Math.min(d,i)),e.center.mass-=o,e.up.mass+=o}}}class v extends w{constructor(t=0,e=1,s=.1){super(t,e,s,!1)}color(){return 16777215}addmass(t){}emptyCell(){return new v}copy(){let t=new v;return t.mass=this.mass,t.max_mass=this.max_mass,t.max_comp=this.max_comp,t.flowable=this.flowable,t}move(t,e,s){e.center.mass=this.mass}}let M=new class{constructor(t,e){this.cells=new Array(t);for(let s=0;s<t;s++)this.cells[s]=new Array(e).fill(new g)}get(t){let e=t[0],s=t[1];return this.cells.length<=e||e<0?null:this.cells[0].length<=s||s<0?null:this.cells[t[0]][t[1]]}set(t,e){this.cells[t[0]][t[1]]=e}row(){return this.cells.length}col(){return this.cells[0].length}update(t){let e,s,i=this.row()-1,n=this.col()-1,o=new Array(this.row());for(let t=0;t<this.row();t++){o[t]=new Array(this.col());for(let e=0;e<this.col();e++)o[t][e]=this.cells[t][e].copy()}for(var l=1;l<i;++l)for(var a=1;a<n;++a)e=new p(this.cells,l,a),s=new p(o,l,a),this.cells[l][a].move(e,s,t);this.cells=o}}(o[0],o[1]);!function(){let t=new i.Container;c.stage.addChild(t);let e=new i.Text("add",{fontSize:20,fill:"white"});e.position.set(o[1]*r,100),t.addChild(e);let s=new i.Sprite(i.Texture.WHITE);s.interactive=!0,s.buttonMode=!0,s.width=h,s.height=h,s.tint=255,s.position.set(o[1]*r,0),c.stage.addChild(s);let n=new i.Text("Water",{fontSize:1.5*r,fill:"white"});n.position.set(s.position.x,s.position.y+h+10),c.stage.addChild(n);let l=new i.Sprite(i.Texture.WHITE);l.interactive=!0,l.buttonMode=!0,l.width=h,l.height=h,l.tint=16777215,l.position.set((o[1]+2)*r+h,0),c.stage.addChild(l);let a=new i.Text("Block",{fontSize:1.5*r,fill:"white"});a.position.set(l.position.x,l.position.y+h+10),c.stage.addChild(a);let u=new i.Sprite(i.Texture.WHITE);u.interactive=!0,u.buttonMode=!0,u.width=h,u.height=h,u.tint=10066329,u.position.set((o[1]+4)*r+2*h,0),c.stage.addChild(u);let m=new i.Text("Delete",{fontSize:1.5*r,fill:"white"});m.position.set(u.position.x,u.position.y+h+10),c.stage.addChild(m),(()=>{let e=!1,i=()=>{};s.on("mousedown",function(s){console.log(innerWidth,innerHeight),i=function(){let i;if(e){let e=s.data.getLocalPosition(t);for(var n=-1;n<=1;++n)for(var o=-1;o<=1;++o)null!=(i=M.get([Math.floor(e.y/r)+n,Math.floor(e.x/r)+o]))&&i.addmass(1)}}}),l.on("mousedown",function(s){console.log("hello"),i=function(){if(e){let e=s.data.getLocalPosition(t),i=Math.floor(e.y/r),n=Math.floor(e.x/r);null!=M.get([i,n])&&M.set([i,n],new v)}}}),u.on("mousedown",function(s){i=function(){if(e){let e=s.data.getLocalPosition(t);for(var i=-1;i<=1;++i)for(var n=-1;n<=1;++n){let t=Math.floor(e.y/r),s=Math.floor(e.x/r);null!=M.get([t,s])&&M.set([t,s],new g(0))}}}}),t.on("mousedown",function(t){e=!0}),t.on("mouseup",function(t){e=!1}),t.on("mousemove",function(t){i()})})();let d=new Array(o[0]);for(let e=0;e<o[0];e++){d[e]=new Array(o[1]);for(let s=0;s<o[1];s++)d[e][s]=new i.Sprite(i.Texture.WHITE),d[e][s].width=r,d[e][s].height=r,d[e][s].position.set(s*r,e*r),t.addChild(d[e][s])}t.interactive=!0,t.buttonMode=!0;let f=new i.Graphics;t.addChild(f);let w=0;c.ticker.add(function(t){w+=t,e.text=String(c.ticker.FPS),M.update(1),w>0&&(function(t,e){let s;for(var i=0;i<t.row();++i)for(var n=0;n<t.col();++n)null!=(s=t.get([i,n]))&&(e[i][n].tint=s.color())}(M,d),w=0)})}(),document.body.appendChild(c.view)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,